// controllers/clienteController.js
const { Cliente, Usuario, SolicitudRetiro, Certificado, sequelize } = require('../models');
const { Op } = require('sequelize');

// Función para validar solo el formato del RUT chileno
const validarRut = (rut) => {
  // Eliminar puntos y guión
  const rutLimpio = rut.replace(/[.-]/g, '');
  // Validar formato básico (debe tener entre 7 y 8 dígitos + dígito verificador)
  if (!/^[0-9]{7,8}[0-9kK]$/.test(rutLimpio)) {
    return { valido: false, error: 'formato' };
  }
  return { valido: true };
};

// Función para formatear RUT
const formatearRut = (rut) => {
  // Eliminar puntos y guión
  const rutLimpio = rut.replace(/[.-]/g, '');
  
  // Separar número y dígito verificador
  const numero = rutLimpio.slice(0, -1);
  const dv = rutLimpio.slice(-1).toLowerCase();
  
  // Asegurar que el número tenga 8 dígitos (rellenar con 0 a la izquierda)
  const numeroCompleto = numero.padStart(8, '0');
  
  // Formatear número con puntos
  const rutFormateado = numeroCompleto.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
  
  // Retornar RUT formateado con guión
  return rutFormateado + '-' + dv;
};

// Función auxiliar para generar contenido del PDF
function generarContenidoPDF(doc, certificado) {
  const fechaActual = new Date().toLocaleDateString('es-ES');
  
  // Header del certificado
  doc.fontSize(20).text('CERTIFICADO DE DISPOSICIÓN FINAL', 50, 50, { align: 'center' });
  doc.fontSize(16).text('FELMART - GESTIÓN DE RESIDUOS', 50, 80, { align: 'center' });
  
  // Línea separadora
  doc.moveTo(50, 110).lineTo(550, 110).stroke();
  
  // Información del certificado
  doc.fontSize(12);
  
  // Número y fecha
  doc.text(`Certificado N°: ${certificado.numero_certificado || certificado.id}`, 50, 130);
  doc.text(`Fecha de emisión: ${fechaActual}`, 350, 130);
  
  // Información del cliente
  doc.text('INFORMACIÓN DEL CLIENTE', 50, 170, { underline: true });
  doc.text(`Empresa: ${certificado.SolicitudRetiro?.Cliente?.nombre_empresa || 'N/A'}`, 50, 190);
  doc.text(`RUT: ${certificado.SolicitudRetiro?.Cliente?.rut || 'N/A'}`, 50, 210);
  doc.text(`Dirección: ${certificado.SolicitudRetiro?.Cliente?.direccion || 'N/A'}`, 50, 230);
  doc.text(`Comuna: ${certificado.SolicitudRetiro?.Cliente?.comuna || 'N/A'}`, 50, 250);
  
  // Información del residuo
  doc.text('INFORMACIÓN DEL RESIDUO', 50, 290, { underline: true });
  doc.text(`Solicitud N°: ${certificado.SolicitudRetiro?.numero_solicitud || 'N/A'}`, 50, 310);
  doc.text(`Tipo de residuo: ${certificado.SolicitudRetiro?.tipo_residuo || 'N/A'}`, 50, 330);
  doc.text(`Cantidad: ${certificado.SolicitudRetiro?.cantidad || 'N/A'} ${certificado.SolicitudRetiro?.unidad || ''}`, 50, 350);
  doc.text(`Descripción: ${certificado.SolicitudRetiro?.descripcion || 'N/A'}`, 50, 370);
  
  // Información de disposición
  doc.text('INFORMACIÓN DE DISPOSICIÓN', 50, 410, { underline: true });
  doc.text(`Fecha de disposición: ${certificado.fecha_disposicion ? new Date(certificado.fecha_disposicion).toLocaleDateString('es-ES') : 'N/A'}`, 50, 430);
  doc.text(`Planta de disposición: ${certificado.planta_disposicion || 'N/A'}`, 50, 450);
  doc.text(`Método de disposición: ${certificado.metodo_disposicion || 'N/A'}`, 50, 470);
  doc.text(`Técnico responsable: ${certificado.tecnico_responsable || 'N/A'}`, 50, 490);
  
  // Observaciones
  if (certificado.observaciones_disposicion) {
    doc.text('OBSERVACIONES', 50, 530, { underline: true });
    doc.text(certificado.observaciones_disposicion, 50, 550, { width: 500 });
  }
  
  // Autorizaciones
  const yPos = certificado.observaciones_disposicion ? 600 : 550;
  doc.text('AUTORIZACIONES Y CUMPLIMIENTO', 50, yPos, { underline: true });
  
  if (certificado.autorizacion_sag) {
    doc.text('✓ Autorización SAG (Servicio Agrícola y Ganadero)', 70, yPos + 20);
  }
  if (certificado.autorizacion_sernageomin) {
    doc.text('✓ Autorización SERNAGEOMIN', 70, yPos + 40);
  }
  if (certificado.cumplimiento_ds148) {
    doc.text('✓ Cumplimiento DS 148/2003 - Reglamento Sanitario', 70, yPos + 60);
  }
  
  // Footer
  const footerY = yPos + 120;
  doc.moveTo(50, footerY).lineTo(550, footerY).stroke();
  doc.text('Este certificado es válido ante las autoridades ambientales y sanitarias correspondientes.', 50, footerY + 10, { align: 'center' });
  doc.text('FELMART - Puerto Montt, Chile', 50, footerY + 30, { align: 'center' });
  doc.text(`Generado el: ${fechaActual}`, 50, footerY + 50, { align: 'center' });
}

const clienteController = {
  // Listar todos los clientes con sus usuarios asociados
  listarClientes: async (req, res) => {
    try {
      const clientes = await Cliente.findAll({
        include: [
          {
            model: Usuario,
            attributes: ['id', 'email', 'activo']
          }
        ],
        order: [['createdAt', 'DESC']]
      });

      res.json({
        success: true,
        clientes: clientes
      });
    } catch (error) {
      console.error('Error al listar clientes:', error);
      res.status(500).json({
        success: false,
        message: 'Error al cargar los clientes'
      });
    }
  },

  // Obtener un cliente específico
  obtenerCliente: async (req, res) => {
    try {
      const { id } = req.params;
      const cliente = await Cliente.findByPk(id, {
        include: [
          {
            model: Usuario,
            attributes: ['id', 'email', 'activo']
          }
        ]
      });

      if (!cliente) {
        return res.status(404).json({
          success: false,
          message: 'Cliente no encontrado'
        });
      }

      res.json({
        success: true,
        cliente: cliente
      });
    } catch (error) {
      console.error('Error al obtener cliente:', error);
      res.status(500).json({
        success: false,
        message: 'Error al cargar el cliente'
      });
    }
  },

  // Crear nuevo cliente
  crearCliente: async (req, res) => {
    try {
      const { 
        rut, 
        nombreEmpresa, 
        email, 
        telefono, 
        contactoPrincipal, 
        direccion, 
        comuna, 
        ciudad 
      } = req.body;

      // Validar campos requeridos
      if (!rut || !nombreEmpresa || !email || !telefono || !contactoPrincipal || !direccion || !comuna || !ciudad) {
        return res.status(400).json({
          success: false,
          message: 'Todos los campos son obligatorios'
        });
      }

      // Validar formato del RUT
      const resultadoRut = validarRut(rut);
      if (!resultadoRut.valido) {
        return res.status(400).json({
          success: false,
          message: 'El formato del RUT es incorrecto. Debe ser: 12.345.678-9'
        });
      }

      // Formatear RUT antes de guardar
      const rutFormateado = formatearRut(rut);

      // Verificar si ya existe un cliente con ese RUT
      const clienteExistente = await Cliente.findOne({ where: { rut: rutFormateado } });
      if (clienteExistente) {
        return res.status(400).json({
          success: false,
          message: 'Ya existe un cliente con ese RUT'
        });
      }

      // Verificar si ya existe un usuario con ese email
      const usuarioExistente = await Usuario.findOne({ where: { email } });
      if (usuarioExistente) {
        return res.status(400).json({
          success: false,
          message: 'Ya existe un usuario registrado con ese correo electrónico'
        });
      }

      // Crear usuario asociado al cliente
      const usuario = await Usuario.create({
        nombre: contactoPrincipal,
        email: email,
        password: 'temporal123', // Password temporal
        rol: 'cliente',
        activo: true
      });

      // Crear el cliente
      const nuevoCliente = await Cliente.create({
        rut: rutFormateado,
        nombre_empresa: nombreEmpresa,
        email,
        telefono,
        contacto_principal: contactoPrincipal,
        direccion,
        comuna,
        ciudad,
        usuarioId: usuario.id
      });

      res.status(201).json({
        success: true,
        message: 'Cliente creado exitosamente',
        cliente: nuevoCliente
      });

    } catch (error) {
      console.error('Error al crear cliente:', error);
      
      // Manejar errores específicos
      if (error.name === 'SequelizeUniqueConstraintError') {
        if (error.errors && error.errors[0].path === 'email') {
          return res.status(400).json({
            success: false,
            message: 'Ya existe un usuario registrado con ese correo electrónico'
          });
        }
        if (error.errors && error.errors[0].path === 'rut') {
          return res.status(400).json({
            success: false,
            message: 'Ya existe un cliente con ese RUT'
          });
        }
      }

      res.status(500).json({
        success: false,
        message: 'Error al crear el cliente. Por favor, intente nuevamente.'
      });
    }
  },

  // Actualizar cliente
  actualizarCliente: async (req, res) => {
    try {
      const { id } = req.params;
      const { 
        rut, 
        nombreEmpresa, 
        email, 
        telefono, 
        contactoPrincipal, 
        direccion, 
        comuna, 
        ciudad 
      } = req.body;

      const cliente = await Cliente.findByPk(id);
      if (!cliente) {
        return res.status(404).json({
          success: false,
          message: 'Cliente no encontrado'
        });
      }

      // Validar formato del RUT si ha cambiado
      if (rut !== cliente.rut) {
        const resultadoRut = validarRut(rut);
        if (!resultadoRut.valido) {
          return res.status(400).json({
            success: false,
            message: 'El formato del RUT es incorrecto. Debe ser: 12.345.678-9'
          });
        }

        const rutFormateado = formatearRut(rut);
        
        // Verificar si el RUT ya existe en otro cliente
        const rutExistente = await Cliente.findOne({ 
          where: { 
            rut: rutFormateado,
            id: { [Op.ne]: id }
          }
        });
        if (rutExistente) {
          return res.status(400).json({
            success: false,
            message: 'Ya existe otro cliente con ese RUT'
          });
        }

        // Actualizar cliente con el RUT formateado
        await cliente.update({
          rut: rutFormateado,
          nombre_empresa: nombreEmpresa,
          email,
          telefono,
          contacto_principal: contactoPrincipal,
          direccion,
          comuna,
          ciudad
        });
      } else {
        // Actualizar cliente sin cambiar el RUT
        await cliente.update({
          nombre_empresa: nombreEmpresa,
          email,
          telefono,
          contacto_principal: contactoPrincipal,
          direccion,
          comuna,
          ciudad
        });
      }

      // Actualizar usuario asociado si existe
      if (cliente.usuarioId) {
        await Usuario.update(
          {
            nombre: contactoPrincipal,
            email: email
          },
          { where: { id: cliente.usuarioId } }
        );
      }

      res.json({
        success: true,
        message: 'Cliente actualizado exitosamente',
        cliente: cliente
      });

    } catch (error) {
      console.error('Error al actualizar cliente:', error);
      res.status(500).json({
        success: false,
        message: 'Error al actualizar el cliente'
      });
    }
  },

  // Eliminar cliente
  eliminarCliente: async (req, res) => {
    try {
      const { id } = req.params;

      const cliente = await Cliente.findByPk(id);
      if (!cliente) {
        return res.status(404).json({
          success: false,
          message: 'Cliente no encontrado'
        });
      }

      // Verificar si el cliente tiene solicitudes asociadas
      const solicitudes = await SolicitudRetiro.findOne({
        where: { cliente_id: id }
      });

      if (solicitudes) {
        return res.status(400).json({
          success: false,
          message: 'No se puede eliminar el cliente porque tiene solicitudes asociadas'
        });
      }

      // Eliminar usuario asociado si existe
      if (cliente.usuarioId) {
        await Usuario.destroy({ where: { id: cliente.usuarioId } });
      }

      // Eliminar cliente
      await cliente.destroy();

      res.json({
        success: true,
        message: 'Cliente eliminado exitosamente'
      });

    } catch (error) {
      console.error('Error al eliminar cliente:', error);
      res.status(500).json({
        success: false,
        message: 'Error al eliminar el cliente'
      });
    }
  },

  // Mostrar dashboard de clientes (render)
  mostrarDashboard: async (req, res) => {
    try {
      // Esta función renderiza la vista, las otras son para API
      res.render('admin/clientes', {
        layout: false,
        titulo: 'Gestión de Clientes',
        usuario: req.session.usuario
      });
    } catch (error) {
      console.error('Error al mostrar dashboard:', error);
      res.status(500).render('error', {
        titulo: 'Error',
        mensaje: 'Error al cargar la página'
      });
    }
  },

  // Obtener solicitudes del cliente autenticado (API)
  obtenerSolicitudesCliente: async (req, res) => {
    try {
      const usuario = req.session.usuario;
      if (!usuario) {
        return res.status(401).json({ success: false, message: 'No autenticado' });
      }
      // Buscar el cliente asociado al usuario
      const cliente = await Cliente.findOne({ where: { usuarioId: usuario.id } });
      if (!cliente) {
        return res.status(404).json({ success: false, message: 'Cliente no encontrado' });
      }
      // Buscar solicitudes de retiro del cliente
      const solicitudes = await SolicitudRetiro.findAll({
        where: { cliente_id: cliente.id },
        order: [['created_at', 'DESC']]
      });
      res.json({ success: true, solicitudes });
    } catch (error) {
      console.error('Error al obtener solicitudes del cliente:', error);
      res.status(500).json({ success: false, message: 'Error al obtener solicitudes del cliente' });
    }
  },

  // Obtener información del cliente autenticado (API)
  obtenerInfoClienteLogueado: async (req, res) => {
    try {
      const usuario = req.session.usuario;
      if (!usuario) {
        return res.status(401).json({ success: false, message: 'No autenticado' });
      }
      // Buscar el cliente asociado al usuario
      const cliente = await Cliente.findOne({ where: { usuarioId: usuario.id } });
      if (!cliente) {
        return res.status(404).json({ success: false, message: 'Cliente no encontrado' });
      }
      res.json({ success: true, cliente });
    } catch (error) {
      console.error('Error al obtener info del cliente:', error);
      res.status(500).json({ success: false, message: 'Error al obtener información del cliente' });
    }
  },

  // ===== FUNCIONES DE CERTIFICADOS =====

  // Obtener certificados del cliente
  obtenerCertificadosCliente: async (req, res) => {
    try {
      const usuarioId = req.session.usuario.id;
      
      // Buscar el cliente asociado al usuario
      const cliente = await Cliente.findOne({
        where: { usuarioId: usuarioId }
      });

      if (!cliente) {
        return res.status(404).json({
          success: false,
          message: 'Cliente no encontrado'
        });
      }

      // Buscar certificados asociados a las solicitudes del cliente
      const certificados = await Certificado.findAll({
        include: [{
          model: SolicitudRetiro,
          where: { clienteId: cliente.id },
          include: [{
            model: Cliente,
            attributes: ['nombre_empresa', 'rut']
          }]
        }],
        order: [['created_at', 'DESC']]
      });

      res.json({
        success: true,
        data: certificados
      });

    } catch (error) {
      console.error('Error obteniendo certificados:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor',
        error: error.message
      });
    }
  },

  // Obtener detalles de un certificado específico
  obtenerDetalleCertificado: async (req, res) => {
    try {
      const { certificadoId } = req.params;
      const usuarioId = req.session.usuario.id;
      
      // Buscar el cliente asociado al usuario
      const cliente = await Cliente.findOne({
        where: { usuarioId: usuarioId }
      });

      if (!cliente) {
        return res.status(404).json({
          success: false,
          message: 'Cliente no encontrado'
        });
      }

      // Buscar el certificado específico del cliente
      const certificado = await Certificado.findOne({
        where: { id: certificadoId },
        include: [{
          model: SolicitudRetiro,
          where: { clienteId: cliente.id },
          include: [{
            model: Cliente,
            attributes: ['nombre_empresa', 'rut', 'direccion', 'comuna', 'ciudad']
          }]
        }]
      });

      if (!certificado) {
        return res.status(404).json({
          success: false,
          message: 'Certificado no encontrado'
        });
      }

      res.json({
        success: true,
        data: certificado
      });

    } catch (error) {
      console.error('Error obteniendo detalle del certificado:', error);
      res.status(500).json({
        success: false,
        message: 'Error interno del servidor',
        error: error.message
      });
    }
  },

  // Descargar certificado en PDF
  descargarCertificado: async (req, res) => {
    try {
      const { certificadoId } = req.params;
      const usuarioId = req.session.usuario.id;
      
      // Buscar el cliente asociado al usuario
      const cliente = await Cliente.findOne({
        where: { usuarioId: usuarioId }
      });

      if (!cliente) {
        return res.status(404).json({
          success: false,
          message: 'Cliente no encontrado'
        });
      }

      // Buscar el certificado específico del cliente
      const certificado = await Certificado.findOne({
        where: { id: certificadoId },
        include: [{
          model: SolicitudRetiro,
          where: { clienteId: cliente.id },
          include: [{
            model: Cliente,
            attributes: ['nombre_empresa', 'rut', 'direccion', 'comuna', 'ciudad', 'contacto_principal']
          }]
        }]
      });

      if (!certificado) {
        return res.status(404).json({
          success: false,
          message: 'Certificado no encontrado'
        });
      }

      // Si el certificado ya tiene un archivo PDF, enviarlo
      if (certificado.archivo_pdf) {
        const path = require('path');
        const fs = require('fs');
        
        const filePath = path.join(__dirname, '../uploads/certificados', certificado.archivo_pdf);
        
        if (fs.existsSync(filePath)) {
          res.setHeader('Content-Type', 'application/pdf');
          res.setHeader('Content-Disposition', `attachment; filename="certificado_${certificado.numero_certificado || certificado.id}.pdf"`);
          return res.sendFile(filePath);
        }
      }

      // Si no existe el archivo, generar el PDF dinámicamente
      const PDFDocument = require('pdfkit');
      const doc = new PDFDocument();
      
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="certificado_${certificado.numero_certificado || certificado.id}.pdf"`);
      
      doc.pipe(res);

      // Generar contenido del PDF
      generarContenidoPDF(doc, certificado);
      
      doc.end();

    } catch (error) {
      console.error('Error descargando certificado:', error);
      res.status(500).json({
        success: false,
        message: 'Error al descargar el certificado',
        error: error.message
      });
    }
  },

  // Exportar listado de certificados en CSV
  exportarListadoCertificados: async (req, res) => {
    try {
      const usuarioId = req.session.usuario.id;
      
      // Buscar el cliente asociado al usuario
      const cliente = await Cliente.findOne({
        where: { usuarioId: usuarioId }
      });

      if (!cliente) {
        return res.status(404).json({
          success: false,
          message: 'Cliente no encontrado'
        });
      }

      // Buscar certificados del cliente
      const certificados = await Certificado.findAll({
        include: [{
          model: SolicitudRetiro,
          where: { clienteId: cliente.id },
          attributes: ['numero_solicitud', 'tipo_residuo', 'cantidad', 'unidad', 'fecha_programada']
        }],
        order: [['created_at', 'DESC']]
      });

      // Generar CSV
      const csvHeader = 'Número Certificado,Solicitud,Tipo Residuo,Cantidad,Fecha Disposición,Planta,Método,Estado\n';
      const csvRows = certificados.map(cert => {
        const estado = cert.archivo_pdf ? 'Disponible' : (cert.fecha_disposicion && new Date(cert.fecha_disposicion) <= new Date() ? 'En Proceso' : 'Pendiente');
        return [
          cert.numero_certificado || cert.id,
          cert.SolicitudRetiro?.numero_solicitud || 'N/A',
          cert.SolicitudRetiro?.tipo_residuo || 'N/A',
          `${cert.SolicitudRetiro?.cantidad || 'N/A'} ${cert.SolicitudRetiro?.unidad || ''}`,
          cert.fecha_disposicion ? new Date(cert.fecha_disposicion).toLocaleDateString('es-ES') : 'N/A',
          cert.planta_disposicion || 'N/A',
          cert.metodo_disposicion || 'N/A',
          estado
        ].join(',');
      }).join('\n');

      const csvContent = csvHeader + csvRows;

      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', `attachment; filename="certificados_${cliente.nombre_empresa}_${new Date().toISOString().split('T')[0]}.csv"`);
      res.send(csvContent);

    } catch (error) {
      console.error('Error exportando listado:', error);
      res.status(500).json({
        success: false,
        message: 'Error al exportar el listado',
        error: error.message
      });
    }
  },

  // Renderizar página de certificados del cliente
  renderCertificadosCliente: async (req, res) => {
    try {
      const usuarioId = req.session.usuario.id;
      
      // Buscar el cliente asociado al usuario
      const cliente = await Cliente.findOne({
        where: { usuarioId: usuarioId },
        include: [{
          model: Usuario,
          attributes: ['nombre', 'email']
        }]
      });

      if (!cliente) {
        return res.redirect('/login?error=cliente_no_encontrado');
      }

      res.render('cliente/certificados', {
        titulo: 'Mis Certificados - Felmart',
        usuario: {
          nombre: cliente.nombre_empresa,
          email: cliente.email
        },
        cliente: cliente
      });

    } catch (error) {
      console.error('Error renderizando página de certificados:', error);
      res.status(500).render('error', {
        titulo: 'Error - Felmart',
        mensaje: 'Error interno del servidor'
      });
    }
  }
};

module.exports = clienteController;