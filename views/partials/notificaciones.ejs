<!-- views/partials/notificaciones.ejs -->
<div class="modal fade" id="notificacionesModal" tabindex="-1" aria-labelledby="notificacionesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="notificacionesModalLabel">
            <i class="fas fa-bell me-2"></i> Notificaciones
          </h5>
          <button type="button" class="btn btn-sm btn-link text-decoration-none" id="marcarTodasLeidas">Marcar todas como leídas</button>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body p-0">
          <div id="listaNotificaciones" class="notificaciones-container">
            <!-- Las notificaciones se cargarán dinámicamente aquí -->
            <div class="text-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <a href="/notificaciones" class="btn btn-primary w-100">Ver todas las notificaciones</a>
        </div>
      </div>
    </div>
  </div>
  
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Obtener elementos del DOM
    const modal = document.getElementById('notificacionesModal');
    const listaNotificaciones = document.getElementById('listaNotificaciones');
    const marcarTodasBtn = document.getElementById('marcarTodasLeidas');
    const contador = document.getElementById('contador-notificaciones');
    
    // Función para cargar notificaciones
    function cargarNotificaciones() {
      fetch('/notificaciones/no-leidas')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Actualizar contador
            if (contador) {
              contador.textContent = data.totalNoLeidas > 0 ? data.totalNoLeidas : '';
              contador.classList.toggle('d-none', data.totalNoLeidas === 0);
            }
            
            // Actualizar lista
            actualizarListaNotificaciones(data.notificaciones);
          }
        })
        .catch(error => console.error('Error al cargar notificaciones:', error));
    }
    
    // Función para actualizar la lista de notificaciones
    function actualizarListaNotificaciones(notificaciones) {
      listaNotificaciones.innerHTML = '';
      
      if (!notificaciones || notificaciones.length === 0) {
        listaNotificaciones.innerHTML = '<div class="text-center py-4">No tienes notificaciones nuevas</div>';
        return;
      }
      
      notificaciones.forEach(notif => {
        const fecha = new Date(notif.createdAt);
        const fechaFormateada = fecha.toLocaleDateString('es-ES') + ' ' + 
                                fecha.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
        
        let icono = 'bell';
        switch (notif.tipo) {
          case 'solicitud': icono = 'file-alt'; break;
          case 'cotizacion': icono = 'file-invoice-dollar'; break;
          case 'visita': icono = 'calendar-check'; break;
          case 'certificado': icono = 'certificate'; break;
          case 'sistema': icono = 'cog'; break;
        }
        
        const item = document.createElement('div');
        item.className = `notificacion-item p-3 border-bottom ${notif.leida ? '' : 'bg-light'}`;
        item.innerHTML = `
          <div class="d-flex">
            <div class="flex-shrink-0 me-3">
              <i class="fas fa-${icono} fa-lg text-primary"></i>
            </div>
            <div class="flex-grow-1">
              <h6 class="mb-1">${notif.titulo}</h6>
              <p class="mb-0 text-muted small">${notif.mensaje}</p>
              <small class="text-muted">${fechaFormateada}</small>
            </div>
          </div>
        `;
        
        item.addEventListener('click', function() {
          marcarComoLeida(notif.id, obtenerEnlaceNotificacion(notif));
        });
        
        listaNotificaciones.appendChild(item);
      });
    }
    
    // Función para obtener enlace según tipo de notificación
    function obtenerEnlaceNotificacion(notif) {
      switch (notif.tipo) {
        case 'solicitud': return `/solicitudes/detalles/${notif.referenciaId}`;
        case 'cotizacion': return `/cotizaciones/detalles/${notif.referenciaId}`;
        case 'visita': return `/visitas/detalles/${notif.referenciaId}`;
        case 'certificado': return `/certificados/detalles/${notif.referenciaId}`;
        default: return '/notificaciones';
      }
    }
    
    // Función para marcar como leída
    function marcarComoLeida(id, redirectUrl) {
      fetch(`/notificaciones/marcar-leida/${id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.href = redirectUrl;
        }
      })
      .catch(error => console.error('Error al marcar notificación:', error));
    }
    
    // Marcar todas como leídas
    if (marcarTodasBtn) {
      marcarTodasBtn.addEventListener('click', function() {
        fetch('/notificaciones/marcar-todas-leidas', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            cargarNotificaciones();
          }
        })
        .catch(error => console.error('Error al marcar notificaciones:', error));
      });
    }
    
    // Cargar notificaciones al abrir el modal
    if (modal) {
      modal.addEventListener('show.bs.modal', function() {
        cargarNotificaciones();
      });
    }
    
    // Cargar notificaciones iniciales
    cargarNotificaciones();
    
    // Actualizar cada minuto
    setInterval(cargarNotificaciones, 60000);
  });
  </script>